import { Body, Controller, Post, Get, Patch, Param, UseGuards, Req, UnauthorizedException, NotFoundException, Query } from '@nestjs/common';
import { JwtAuthGuard } from './auth/jwt-auth.guard';
import { LineBotService } from './line-bot.service';
import { firestore } from './firebase';
import * as jwt from 'jsonwebtoken';
import { LineBot } from './line-bot.types';
import fetch from 'node-fetch';

@Controller('api/line-bot')
export class LineBotController {
  constructor(private readonly botService: LineBotService) {}

  // üü¢ ‡∏ú‡∏π‡∏Å LINE Bot ‡∏Å‡∏±‡∏ö user
  @Post('register')
  @UseGuards(JwtAuthGuard)
  registerBot(
    @Body() body: { name: string; accessToken: string; lineUserId: string },
    @Req() req: any
  ) {
    console.log('[registerBot] req.user =', req.user);
    return this.botService.createBot({
      ...body,
      assignedTo: req.user.userId, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà undefined
    });
  }
  
  @Get('available-bot')
  async getAvailableBot() {
    const snap = await firestore.collection('bots')
      .where('assignedTo', '==', '')
      .limit(1)
      .get();

    if (snap.empty) throw new NotFoundException('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    const bot = snap.docs[0].data();
    return {
      name: bot.name,
      botId: bot.botId,
      accessToken: bot.accessToken,
    };
  }

  @Post('webhook')
  async handleWebhook(@Body() body: any, @Query('token') token?: string) {
    const event = body?.events?.[0];
    const lineUserId = event?.source?.userId || 'N/A';
    const replyToken = event?.replyToken || 'N/A';
    const type = event?.type || 'unknown';

    console.log('üì• [TEST WEBHOOK]');
    console.log('üî∏ type:', type);
    console.log('üî∏ lineUserId:', lineUserId);
    console.log('üî∏ replyToken:', replyToken);
    console.log('üî∏ token (query):', token || '‚Äî');

    if (!lineUserId || lineUserId === 'N/A') {
      return { status: 'ignored', error: 'No LINE User ID found' };
    }

    // ‚úÖ ‡πÄ‡∏Ñ‡∏™‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô /connect?token=...
    if (token) {
      try {
        const decoded: any = jwt.verify(token, process.env.JWT_SECRET || 'secret');
        const userId = decoded.userId;
        console.log('‚úÖ JWT decoded userId =', userId);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏•‡∏á Firestore
        await firestore.collection('bindings').add({
          userId,
          lineUserId,
          createdAt: new Date().toISOString(),
        });

        // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        await fetch('https://api.line.me/v2/bot/message/push', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            to: lineUserId,
            messages: [
              {
                type: 'text',
                text: `‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\nLINE ID: ${lineUserId}\nuserId: ${userId}`,
              },
            ],
          }),
        });

        return { status: 'bound', userId, lineUserId };
      } catch (err: any) {
        console.error('‚ùå JWT decode failed', err);
        return { status: 'error', error: 'Invalid token' };
      }
    }

    // ‚úÖ ‡πÄ‡∏Ñ‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡∏Å LINE ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ token)
    const bindingSnap = await firestore
      .collection('bindings')
      .where('lineUserId', '==', lineUserId)
      .limit(1)
      .get();

    if (bindingSnap.empty) {
      // ‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°
      await fetch('https://api.line.me/v2/bot/message/push', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          to: lineUserId,
          messages: [
            {
              type: 'text',
              text: '‚ùó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
            },
          ],
        }),
      });

      return { status: 'unlinked', lineUserId };
    }

    // ‚úÖ ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const binding = bindingSnap.docs[0].data();
    const userId = binding.userId;

    console.log('‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß =', userId);

    await fetch('https://api.line.me/v2/bot/message/push', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        to: lineUserId,
        messages: [
          {
            type: 'text',
            text: `üì¨ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${userId}, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß!`,
          },
        ],
      }),
    });

    return { status: 'linked', userId };
  }
    
  
  // üü¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
  @Post('send')
  @UseGuards(JwtAuthGuard)
  sendMessage(@Body() body: { message: string }, @Req() req: any) {
    return this.botService.sendMessage(req.user.userId, body.message);
  }

  // üü¢ ‡∏î‡∏∂‡∏á bot ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  @Get('my-bot')
  @UseGuards(JwtAuthGuard)
  async getMyBot(@Req() req: any): Promise<LineBot | undefined> {
    return this.botService.getBotByUser(req.user.userId);
  }

  // üü¢ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  @Get('logs')
  getAllLogs() {
    return this.botService.getLogs();
  }

  // üü¢ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  @Get('admin/users')
  @UseGuards(JwtAuthGuard)
  getAllUsers() {
    return this.botService.getUsersWithBotCount(); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á return ‡πÄ‡∏õ‡πá‡∏ô array
  }
  
  

  @Post('admin/broadcast')
  @UseGuards(JwtAuthGuard)
  async broadcast(@Body() body: { message: string }, @Req() req: any) {
    const userSnap = await firestore.collection('users').doc(req.user.userId).get();
    const user = userSnap.data();
  
    if (!user || user.role !== 'admin') {
      throw new UnauthorizedException('Only admin can broadcast');
    }
  
    return this.botService.broadcast(body.message);
  }
  
  @Get('auth/me')
  @UseGuards(JwtAuthGuard)
  async getMe(@Req() req: any) {
    const doc = await firestore.collection('users').doc(req.user.userId).get();
    const data = doc.data();
    return {
      userId: req.user.userId,
      email: data?.email,
      role: data?.role || 'user',
    };
  }

  @Patch('admin/promote/:userId')
  @UseGuards(JwtAuthGuard)
  async promoteUser(@Param('userId') userId: string, @Req() req: any) {
    const me = await firestore.collection('users').doc(req.user.userId).get();
    if (!me.exists || me.data()?.role !== 'admin') {
      throw new UnauthorizedException('Only admin can promote');
    }
  
    await firestore.collection('users').doc(userId).update({ role: 'admin' });
    return { success: true, userId };
  }
}
